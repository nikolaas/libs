package org.ns.mq;

/**
 * Реестр очередей сообщений
 * @author stupak
 */
public interface MqRegistry {
    
    /**
     * Получение очереди сообщений по ключу очереди сообщений
     * @param <K> Тип ключа сообщения
     * @param <V> Тип значения сообщения
     * @param key Ключ очереди сообщений
     * @return Очередь сообщений
     */
    <K, V> MessageQueue<K, V> getMessageQueue(MqKey<K, V> key);
    
    /**
     * Получение отправителя сообщений в очередь по ключу очереди сообщений
     * @param <K> Тип ключа сообщения
     * @param <V> Тип значения сообщения
     * @param key Ключ очереди сообщений
     * @return Отправитель сообщений в очередь
     */
    <K, V> MqSender<K, V> getMqSender(MqKey<K, V> key);
    
    /**
     * Создание очереди сообщений по переданному ключу очереди.<br>
     * Такжу будет создан отправитель сообщений в созданную очередь.
     * @param <K> Тип ключа сообщения
     * @param <V> Тип значения сообщения
     * @param key Ключ очереди сообщений
     * @return Очередь сообщений
     */
    <K, V> MessageQueue createMessageQueue(MqKey<K, V> key);
    
    /**
     * Проверка существования очереди сообщений, зарегистрированной на указанный ключ
     * @param <K> Тип ключа сообщения
     * @param <V> Тип значения сообщения
     * @param key Ключ очереди сообщений
     * @return true, если очередь сообщений существует, иначе - false
     */
    <K, V> boolean containsMessageQueue(MqKey<K, V> key);
    
}
